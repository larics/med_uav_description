<?xml version="1.0"?>

<robot name="bebop" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:property name="enable_velodyne" value="$(arg enable_velodyne)"/>
  <xacro:property name="namespace" value="$(arg namespace)" />
  <xacro:property name="wind_force" value="$(arg wind_force)" />
  <xacro:property name="wind_start" value="$(arg wind_start)" />
  <xacro:property name="wind_duration" value="$(arg wind_duration)" />
  <xacro:property name="wind_direction_x" value="$(arg wind_direction_x)" />
  <xacro:property name="wind_direction_y" value="$(arg wind_direction_y)" />
  <xacro:property name="wind_direction_z" value="$(arg wind_direction_z)" />

  <!-- Instantiate bebop "mechanics" -->
  	<xacro:include filename="$(find med_uav_description)/urdf/bebop_base.urdf.xacro" />
  	<xacro:include filename="$(find rotors_description)/urdf/component_snippets.xacro" />
    

  	<!-- Realistic odometry sensor with noise -->
	<xacro:odometry_plugin_macro
		namespace="${namespace}"
		odometry_sensor_suffix=""
		parent_link="base_link"
		pose_topic="pose"
		pose_with_covariance_topic="pose_with_covariance"
		position_topic="position"
		transform_topic="transform"
		odometry_topic="odometry"
		parent_frame_id="world"
		child_frame_id="${namespace}/base_link"
		mass_odometry_sensor="0.01"
		measurement_divisor="5"
		measurement_delay="0"
		unknown_delay="0.0"
		noise_normal_position="0.0 0.0 0.0"
		noise_normal_quaternion="0.0 0.0 0.0"
		noise_normal_linear_velocity="0.0 0.0 0.0"
		noise_normal_angular_velocity="0.0 0.0 0.0"
		noise_uniform_position="0.0 0.0 0.0"
		noise_uniform_quaternion="0.0 0.0 0.0"
		noise_uniform_linear_velocity="0.0 0.0 0.0"
		noise_uniform_angular_velocity="0.0 0.0 0.0"
		enable_odometry_map="false"
		odometry_map=""
		image_scale="">
		<inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
		<origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
	</xacro:odometry_plugin_macro>

	<!-- Ground truth odometry sensor without noise -->
	<xacro:odometry_plugin_macro
		namespace="${namespace}"
		odometry_sensor_suffix="gt"
		parent_link="base_link"
		pose_topic="pose_gt"
		pose_with_covariance_topic="pose_with_covariance_gt"
		position_topic="position_gt"
		transform_topic="transform_gt"
		odometry_topic="odometry_gt"
		parent_frame_id="world"
		child_frame_id="${namespace}/base_link"
		mass_odometry_sensor="0.01"
		measurement_divisor="5"
		measurement_delay="0"
		unknown_delay="0.0"
		noise_normal_position="0.0 0.0 0.0"
		noise_normal_quaternion="0.0 0.0 0.0"
		noise_normal_linear_velocity="0.0 0.0 0.0"
		noise_normal_angular_velocity="0.0 0.0 0.0"
		noise_uniform_position="0.0 0.0 0.0"
		noise_uniform_quaternion="0.0 0.0 0.0"
		noise_uniform_linear_velocity="0.0 0.0 0.0"
		noise_uniform_angular_velocity="0.0 0.0 0.0"
		enable_odometry_map="false"
		odometry_map=""
		image_scale="">
		<inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
		<origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
	</xacro:odometry_plugin_macro>

	<!-- Instantiate a wind plugin -->
	<gazebo>
	    <!-- wind plugin -->
	    <plugin name="wind_plugin" filename="librotors_gazebo_wind_plugin.so">
	      <robotNamespace>$(arg namespace)/</robotNamespace>
	      <xyzOffset>0 0 0</xyzOffset>
	      <frameId>base_link</frameId>
	      <linkName>base_link</linkName>
	      <windDirection>1 1 -0.3</windDirection>
	      <windForceMean>0</windForceMean>
	      <windForceVariance>0.0</windForceVariance>
	      <windGustDirection>$(arg wind_direction_x) $(arg wind_direction_y) $(arg wind_direction_z)</windGustDirection>
	      <windGustStart>$(arg wind_start)</windGustStart>
	      <windGustDuration>$(arg wind_duration)</windGustDuration>
	      <windGustForceMean>$(arg wind_force)</windGustForceMean>
	      <windGustForceVariance>0</windGustForceVariance>
	    </plugin>
	</gazebo>

    <link name="laser1D_link">
      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>
    <joint name="laser1D_joint" type="fixed">
      <!--<axis xyz="0 0 1" />-->
      <origin xyz="0.111 0 0.0217" rpy="0 0 0"/>
      <parent link="base_link"/>
      <child link="laser1D_link"/>
    </joint>


 	<gazebo reference="laser1D_link">
		<sensor type="ray" name="laser1D_sensor">
	      <pose>0 0 0 0 0 0</pose>
	      <visualize>true</visualize>
	      <update_rate>200</update_rate>
	      <ray>
	        <scan>
	          <horizontal>
	            <samples>1</samples>
	            <resolution>1</resolution>
	            <min_angle>0</min_angle>
	            <max_angle>0</max_angle>
	          </horizontal>
	        </scan>
	        <range>
	          <min>0.10</min>
	          <max>100.0</max>
	          <resolution>0.01</resolution>
	        </range>
	        <noise>
	          <type>gaussian</type>
	          <!-- Noise parameters based on published spec for Hokuyo laser
	               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
	               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
	               reading. -->
	          <mean>0.0</mean>
	          <stddev>0.01</stddev>
	        </noise>
	      </ray>
	      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
	        <topicName>laser/scan</topicName>
	        <frameName>laser1D_link</frameName>
	      </plugin>
	    </sensor>
  	</gazebo>
    
    
    <xacro:if value="${enable_velodyne}">
	    <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>
	    <VLP-16 parent="base_link" name="velodyne" topic="/velodyne_points" hz="10" samples="440" gpu="false">
	        <origin xyz="0 0 0.05" rpy="0 0 0" />
	    </VLP-16>
    </xacro:if>
  
</robot>

